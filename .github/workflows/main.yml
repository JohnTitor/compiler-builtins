name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - target: aarch64-unknown-none-softfloat
          os: ubuntu-latest
          rust: nightly
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      shell: bash
    - run: rustup target add ${{ matrix.target }}
    - run: rustup component add llvm-tools-preview
    - name: Download compiler-rt reference sources
      run: |
        curl -L -o code.tar.gz https://github.com/rust-lang/llvm-project/archive/rustc/10.0-2020-05-05.tar.gz
        tar xzf code.tar.gz --strip-components 1 llvm-project-rustc-10.0-2020-05-05/compiler-rt
        echo RUST_COMPILER_RT_ROOT=./compiler-rt >> $GITHUB_ENV
      shell: bash

    # Non-linux tests just use our raw script
    - run: ./ci/run.sh ${{ matrix.target }}
      if: matrix.os != 'ubuntu-latest'
      shell: bash

    # Otherwise we use our docker containers to run builds
    - run: cargo generate-lockfile && ./ci/run-docker.sh ${{ matrix.target }}
      if: matrix.os == 'ubuntu-latest'

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check
